#!/bin/bash
### BEGIN INIT INFO
# Provides:          wb-homa-gpio
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Required-Start: $remote_fs mosquitto
# Required-Stop: $remote_fs
# Should-Start: wb-hwconf-manager wb-modules
#
# Short-Description: MQTT Driver for GPIO-controlled switches
# Description:       MQTT Driver for GPIO-controlled switches
### END INIT INFO

# Author: Evgeny Boger <boger@contactless.ru>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="MQTT Driver for GPIO-controlled switches"
NAME=wb-homa-gpio
DAEMON=/usr/bin/$NAME
USER_CONFFILE="/etc/wb-homa-gpio.conf"
DYN_CONFFILE="/tmp/wb-homa-gpio.do-not-edit.conf"
SYS_CONFFILE="/tmp/wb-homa-gpio.sys.conf"
TMP_USR_CONFFILE="/tmp/wb-homa-gpio.usr.conf"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

#~ # Read configuration variable file if it is present
#~ [ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

VERBOSE="yes"

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	if [[ ! -d /sys/firmware/devicetree/base/wirenboard/gpios ]]; then
		CONFFILE=${USER_CONFFILE}
	else
		source "/usr/lib/wb-utils/common.sh"
		wb_source "of"
		wb_source "wb_env_of"
		WB_ENV_CACHE="${WB_ENV_CACHE:-/var/run/wb_env.cache}"

		if [[ -e "$WB_ENV_CACHE" ]]; then
			set -a
			source "$WB_ENV_CACHE"
			set +a
		else
			declare -A OF_GPIOCHIPS
			of_find_gpiochips
			declare -p OF_GPIOCHIPS
		fi

		WB_OF_ROOT="/wirenboard"
		node="${WB_OF_ROOT}/gpios"

		GPIOSYSCONF='{\n  "channels": ['
		first=1
		for gpioname in  $(of_node_children "$node" | sort); do
			gpio="$(of_get_prop_gpio "$node/$gpioname" "io-gpios")"
			ITEM="{ \
				\"gpio\" : $(of_gpio_to_num "$gpio") , \
				\"name\" : \"$gpioname\", \
				\"direction\": \"$(of_has_prop "$node/$gpioname" "input" && echo -n "input" || echo -n "output")\" ,\
				\"inverted\" : $(of_gpio_is_inverted "$gpio" && echo -n "true" || echo -n "false"), \
				\"initial_state\": $(of_has_prop "$node/$gpioname" "output-high" && echo -n "true" || echo -n "false") ,\
				\"_sort_key\" : $(of_has_prop "$node/$gpioname" "sort-order" && echo -n $(of_get_prop_ulong "$node/$gpioname" "sort-order") || echo -n 0)
			}"

			if (( first )); then
				first=0
			else
				GPIOSYSCONF="$GPIOSYSCONF,"
			fi

			GPIOSYSCONF="$GPIOSYSCONF\n$ITEM"
		done
		GPIOSYSCONF="$GPIOSYSCONF\n]}"
		echo -e $GPIOSYSCONF | jq ".channels = (.channels | sort_by(._sort_key) | map(del(._sort_key)))" > ${SYS_CONFFILE}

		sed 's#//.*##' "$USER_CONFFILE"  > ${TMP_USR_CONFFILE}

		jq '.[0] as $first | .[1] as $second | $first * $second | .channels |= ( $first.channels + $second.channels | [reduce .[] as $o ({}; .[$o["gpio"] | tostring] += $o ) | .[]] ) ' -s  ${SYS_CONFFILE} ${TMP_USR_CONFFILE} > ${DYN_CONFFILE}
		CONFFILE=${DYN_CONFFILE}
	fi

	start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --make-pidfile --background --pidfile $PIDFILE --exec $DAEMON -- \
		-c ${CONFFILE} \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
